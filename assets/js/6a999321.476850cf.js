"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[70777],{37819:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(74848),t=n(28453),s=n(98180);const r={id:"llvm-basics",title:"LLVM Basics",description:"LLVM Basics",keywords:["C++","LLVM"]},a=void 0,o={id:"lang/cpp/advanced-cpp/llvm/llvm-basics",title:"LLVM Basics",description:"LLVM Basics",source:"@site/docs/lang/cpp/advanced-cpp/llvm/llvm-basics.mdx",sourceDirName:"lang/cpp/advanced-cpp/llvm",slug:"/lang/cpp/advanced-cpp/llvm/llvm-basics",permalink:"/docs/lang/cpp/advanced-cpp/llvm/llvm-basics",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:17233903e5,frontMatter:{id:"llvm-basics",title:"LLVM Basics",description:"LLVM Basics",keywords:["C++","LLVM"]},sidebar:"cpp",previous:{title:"C++ constexpr",permalink:"/docs/lang/cpp/advanced-cpp/cpp-constexpr"},next:{title:"Build LLVM",permalink:"/docs/lang/cpp/advanced-cpp/llvm/llvm-build-from-source"}},c={},d=[{value:"Terms",id:"terms",level:2},{value:"LLVM Core",id:"llvm-core",level:3},{value:"Clang",id:"clang",level:3},{value:"LLDB",id:"lldb",level:3},{value:"LLD",id:"lld",level:3},{value:"libc++",id:"libc",level:3},{value:"libc++abi",id:"libcabi",level:3},{value:"Clang + LLVM",id:"clang--llvm",level:2}];function p(e){const l={a:"a",blockquote:"blockquote",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(l.p,{children:["Ref: ",(0,i.jsx)(l.a,{href:"http://llvm.org/",children:"http://llvm.org/"})]}),"\n",(0,i.jsx)("center",{children:(0,i.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/advanced-cpp/llvm/llvm-llvm.png")})}),"\n",(0,i.jsx)(l.h2,{id:"terms",children:"Terms"}),"\n",(0,i.jsx)(l.h3,{id:"llvm-core",children:"LLVM Core"}),"\n",(0,i.jsxs)(l.blockquote,{children:["\n",(0,i.jsx)(l.p,{children:'The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!) These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR"). The LLVM Core libraries are well documented, and it is particularly easy to invent your own language (or port an existing compiler) to use LLVM as an optimizer and code generator.'}),"\n"]}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"Build platform"}),": The platform on which the compilation tools are executed"]}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"Host platform"}),": The platform on which the code will run"]}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"Target platform"}),": Only when building a compiler, this is the platform that the compiler will generate code for"]}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"Native compilation"}),": Host == Target"]}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"Cross compilation"}),": Host != Target"]}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"clang",children:"Clang"}),"\n",(0,i.jsxs)(l.blockquote,{children:["\n",(0,i.jsx)(l.p,{children:'Clang is an "LLVM native" C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles, extremely useful error and warning messages and to provide a platform for building great source level tools. The Clang Static Analyzer and clang-tidy are tools that automatically find bugs in your code, and are great examples of the sort of tools that can be built using the Clang frontend as a library to parse C/C++ code.'}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"lldb",children:"LLDB"}),"\n",(0,i.jsxs)(l.blockquote,{children:["\n",(0,i.jsx)(l.p,{children:'he LLDB project builds on libraries provided by LLVM and Clang to provide a great native debugger. It uses the Clang ASTs and expression parser, LLVM JIT, LLVM disassembler, etc so that it provides an experience that "just works". It is also blazing fast and much more memory efficient than GDB at loading symbols.'}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"lld",children:"LLD"}),"\n",(0,i.jsxs)(l.blockquote,{children:["\n",(0,i.jsx)(l.p,{children:"The LLD project is a new linker. That is a drop-in replacement for system linkers and runs much faster."}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"libc",children:"libc++"}),"\n",(0,i.jsxs)(l.blockquote,{children:["\n",(0,i.jsx)(l.p,{children:"libc++ is an implementation of the C++ standard library, targeting C++11, C++14 and above."}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"libcabi",children:"libc++abi"}),"\n",(0,i.jsxs)(l.blockquote,{children:["\n",(0,i.jsx)(l.p,{children:"libc++abi is a new implementation of low level support for a standard C++ library."}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"clang--llvm",children:"Clang + LLVM"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:(0,i.jsx)(l.a,{href:"https://github.com/llvm/llvm-project",children:"https://github.com/llvm/llvm-project"})}),"\n",(0,i.jsx)(l.li,{children:(0,i.jsx)(l.a,{href:"https://llvm.org/docs/GettingStarted.html",children:"https://llvm.org/docs/GettingStarted.html"})}),"\n"]})]})}function h(e={}){const{wrapper:l}={...(0,t.R)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,l,n)=>{n.d(l,{R:()=>r,x:()=>a});var i=n(96540);const t={},s=i.createContext(t);function r(e){const l=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function a(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:l},e.children)}}}]);