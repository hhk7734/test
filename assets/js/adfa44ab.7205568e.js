"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[55106],{24656:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(74848),s=t(28453);const r={id:"type",title:"Python Pybind11 Type",sidebar_label:"Type",description:"Python Pybind11 Type",keywords:["Python","package","Pybind11","Type"]},i=void 0,o={id:"lang/python/package/pybind11/type",title:"Python Pybind11 Type",description:"Python Pybind11 Type",source:"@site/docs/lang/python/package/pybind11/type.mdx",sourceDirName:"lang/python/package/pybind11",slug:"/lang/python/package/pybind11/type",permalink:"/docs/lang/python/package/pybind11/type",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1727095093e3,frontMatter:{id:"type",title:"Python Pybind11 Type",sidebar_label:"Type",description:"Python Pybind11 Type",keywords:["Python","package","Pybind11","Type"]},sidebar:"python",previous:{title:"Basics",permalink:"/docs/lang/python/package/pybind11/"},next:{title:"setuptools",permalink:"/docs/lang/python/package/setuptools"}},l={},c=[{value:"Custom type caster",id:"custom-type-caster",level:2},{value:"Class member function type casting",id:"class-member-function-type-casting",level:2},{value:"Example",id:"example",level:3},{value:"Class member lambda arguments",id:"class-member-lambda-arguments",level:2},{value:"Example",id:"example-1",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"custom-type-caster",children:"Custom type caster"}),"\n",(0,a.jsxs)(n.p,{children:["Ref: ",(0,a.jsx)(n.a,{href:"https://pybind11.readthedocs.io/en/stable/advanced/cast/custom.html",children:"https://pybind11.readthedocs.io/en/stable/advanced/cast/custom.html"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"namespace pybind11 {\nnamespace detail {\n    template<>\n    struct type_caster<lot::pin_mode_t> {\n    public:\n        /**\n         * This macro establishes the name 'lot::pin_mode_t' in\n         * function signatures and declares a local variable\n         * 'value' of type lot::pin_mode_t\n         */\n        PYBIND11_TYPE_CASTER(lot::pin_mode_t, _(\"lot::pin_mode_t\"));\n\n        /**\n         * Conversion part 1 (Python->C++): convert a PyObject into\n         * a lot::pin_mode_t instance or return false upon failure.\n         * The second argument indicates whether implicit conversions\n         * should be applied.\n         */\n        bool load(handle src, bool) {\n            /* Extract PyObject from handle */\n            PyObject *source = src.ptr();\n            /* Try converting into a Python integer value */\n            PyObject *tmp = PyNumber_Long(source);\n            if(! tmp) return false;\n            /* Now try to convert into a C++ lot::pin_mode_t */\n            value = static_cast<lot::pin_mode_t>(PyLong_AsLong(tmp));\n            Py_DECREF(tmp);\n            /* Ensure return code was OK (to avoid out-of-range errors etc) */\n            return ! (value == -1 && ! PyErr_Occurred());\n        }\n\n        /**\n         * Conversion part 2 (C++ -> Python): convert an lot::pin_mode_t\n         * instance into a Python object. The second and third arguments\n         * are used to indicate the return value policy and parent object\n         * (for ``return_value_policy::reference_internal``) and are\n         * generally ignored by implicit casters.\n         */\n        static handle cast(lot::pin_mode_t src,\n                           return_value_policy /* policy */,\n                           handle /* parent */) {\n            return PyLong_FromLong(static_cast<int>(src));\n        }\n    };\n}    // namespace detail\n}    // namespace pybind11\n"})}),"\n",(0,a.jsx)(n.h2,{id:"class-member-function-type-casting",children:"Class member function type casting"}),"\n",(0,a.jsx)(n.p,{children:"Use ClassWrapper or lambda function that has class as the first parameter."}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'/*\n * lot/Uart.h\n */\npy::class_<lot::Uart>(m, "Uart")\n    .def(py::init<const char *>())\n    .def(py::init<uint16_t>())\n    .def("init",\n         &lot::Uart::init,\n         py::arg("baud_rate") = 115200,\n         py::arg("uart_mode") = lot::U8N1)\n    .def("baudrate", &lot::Uart::baudrate)\n    .def("mode", &lot::Uart::mode)\n    .def("available", &lot::Uart::available)\n    .def("transmit",\n         [](lot::Uart &self, py::bytes data) {\n             std::string str = data;\n             if(str.size() > 0) {\n                 self.transmit(reinterpret_cast<uint8_t *>(\n                                   const_cast<char *>(str.c_str())),\n                               str.size());\n             }\n         })\n    .def("receive", [](lot::Uart &self) {\n        uint16_t size = self.available();\n        if(size > 0) {\n            uint8_t *buf = new uint8_t[size];\n            self.receive(buf, size);\n            py::bytes data(reinterpret_cast<const char *>(buf), size);\n            delete[] buf;\n            return data;\n        }\n        return py::bytes("");\n    });\n'})}),"\n",(0,a.jsx)(n.h2,{id:"class-member-lambda-arguments",children:"Class member lambda arguments"}),"\n",(0,a.jsx)(n.p,{children:"Register variables in order except self."}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'    .def(\n        "receive",\n        [](lot::I2c &self, int slave_address, int size) {\n            if(size > 0) {\n                uint8_t *buf = new uint8_t[size];\n                self.receive(static_cast<uint8_t>(slave_address), buf, size);\n                py::bytes data(reinterpret_cast<const char *>(buf), size);\n                delete[] buf;\n                return data;\n            }\n            return py::bytes("");\n        },\n        // py::arg( "self" ),\n        py::arg("slave_address"),\n        py::arg("size") = 1)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);